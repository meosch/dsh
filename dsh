#!/bin/bash

DSH_VERSION=1.7.0

help ()
{
	echo "Drude Shell $DSH_VERSION. Usage: dsh <command> [params]"
	echo
	echo "Commands list:"
	echo
	echo "	start (up)		Start vagrant vm (if stopped) and docker containers"
	echo "	stop (down)		Stop project containers"
	echo "	    -a (--all)		Stop all running containers from all Docker projects"
	echo "	restart	[containers]	Restart all current project containers or specified [containers]"
	echo "	reload			Restart vagrant vm"
	echo "	halt			Stop vagrant vm"
	echo "	status (st, ps)		Show project containers status"
	echo "	    -a (--all)		Show all running containers from all Docker projects status"
	echo "	vmstat			Show vagrant vm usage statistics"
	echo
	echo "	reset [containers]	Recreate (stop, remove, up) all project containers or specified [containers]"
	echo "	remove [containers]	Remove all project containers or specified [containers]"
	echo
	echo "	bash [container]	Open bash to container. If no container provided defaults to 'cli'"
	echo "	exec (run) <command>	Execute a command in 'cli' container (Usage: dsh exec <command> [params])"
	echo "	logs [containers]	Show docker logs for container(s)"
	echo
	echo "	mysql (sql)		Opens mysql shell to current project database"
	echo "	mysql-import <file>	Truncate database and import from sql dump (usage: dsh mysql-import <dbdump.sql|dbdump.sql.gz>)"
	echo "	  (sqli)		Note: DB dump file should be inside your project folder"
	echo
	echo "	init [params]		Execute project init script .drude/scripts/drude-init.sh (params will be passed to script)"
	echo "	exec-url <url>		Download script from URL and run it. URL should be public. Alias: init-url"
	echo "	drush [command]		Execute drush command (usage: dsh drush [command] [option] [option]...)"
	echo "	cc [cache_type]		Clear Drupal caches (\"dsh cc\" is equal to \"dsh cc all\")"
	echo
	echo "	behat [--path=path]	Run Behat tests from path (relative to project root). Default: tests/behat"
	echo
	echo "	install			Install/check prerequisites, boot2docker and drude config"
	echo "	install prerequisites 	Only install prerequisites"
	echo "	install boot2docker 	Only install boot2docker"
	echo "	install drude 		Only install the latest default docker-compose.yml"
	echo "	install autocomplete 	Install commands autocomplete for Bash"
	echo "	update			Update Drude"
	echo
	echo "	self-update		Update dsh itself"
	echo "	version	(-v)		Print dsh version"
	echo
}

# return bash completion words
# @param $1 command to return words for
bash_comp_words ()
{
	case $1 in
		install)
			echo "prerequisites boot2docker drude"
			exit 0
			;;
		dsh)
			echo "start up stop down halt reload restart status vmstat reset remove bash exec logs run mysql sql mysql-import sqli init exec-url drush behat install update self-update version help"
			exit 0
			;;
		*)
			exit 1 #return 1 to completion function to prevent completion is we don't know what to do
	esac
}

# Console colors
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
NC='\033[0m'

#-------------------------- Testing --------------------------------
if [[ $DRUDE_BRANCH == "" ]]; then
	DRUDE_BRANCH='master'
fi
if [[ $B2D_BRANCH == "" ]]; then
	B2D_BRANCH='master'
fi

# Check whether shell is interactive (otherwise we are running in a non-interactive script environment)
is_tty ()
{
	# disable interactive shell on windows for now
	# known Docker issue: https://github.com/docker/docker/issues/12469
	res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != '' ]]; then
		return 1;
	fi
	[[ "$(/usr/bin/tty || true)" != "not a tty" ]]
}

testing_warn ()
{
	if ! is_tty ; then return; fi
	if [[ ! $B2D_BRANCH == 'master' ]] || [[ ! $DRUDE_BRANCH == 'master' ]]; then
		echo-yellow "dsh: boot2docker - ${B2D_BRANCH}, drude - ${DRUDE_BRANCH}"
	fi
}

#---------------- Docker Compose Global Settings ----------------------
DC_FILE=''
DC_PROJECT=''
DEFAULT_DOCKER_HOST='tcp://192.168.10.10:2375'
if [[ ! $DRUDE_DC_FILE == "" ]]; then
	DC_FILE="-f $DRUDE_DC_FILE"
fi
if [[ ! $DRUDE_DC_PROJECT == "" ]]; then
	DC_PROJECT="-p $DRUDE_DC_PROJECT"
fi

# Display dsh version
# @option --short - Display only the version number
version ()
{
	if [[ $1 == '--short' ]]; then
		echo "$DSH_VERSION"
	else
		testing_warn
		echo "dsh version: $DSH_VERSION"
	fi
}

# Pass global project and file settings to docker-compose.
# Use this function for every docker-compose invocation.
docker_compose ()
{
	docker-compose $DC_FILE $DC_PROJECT $*
}

#-------------------------- Helper functions --------------------------------

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

if_failed ()
{
	if [ ! $? -eq 0 ]; then
		if [[ "$1" == "" ]]; then msg="dsh: error"; else msg="$1"; fi
		echo-red "dsh: $msg"
		exit 1
	fi
}

# Search for a file/directory in a directiry tree upwards. Return it's path.
# @param $1 filename
upfind ()
{
	if [[ $1 == '' ]]; then return 1; fi
	( #incapsulate cd
		while [[ ! -f $1 ]] && [[ ! -d $1 ]] && [[ $PWD != / ]]; do
			cd ".."
		done;
		if [[ -f $1 ]] || [[ -d $1 ]]; then echo $PWD; fi
	)
}

yml_get_path ()
{
	local yml_path=''
	yml_path=$(upfind "docker-compose.yml")
	if [[ $yml_path == '' ]]; then yml_path=$(upfind ".drude"); fi
	echo $yml_path
}

# Returns absolute path
get_abs_path ()
{
	local _dir
	if [ -f $1 ]; then
		_dir=$(dirname $1)
	elif [ -d $1 ]; then
		_dir=$1
	else
		echo "Path \"$1\" does not exist"
		return
	fi
	local absolute=$( cd "${_dir}" ; pwd )
	echo "$absolute"
}

# TODO: DEPRECATED
# Returns project root absolute path without trailing slash or "." if couldn't find real path
get_project_root_path ()
{
	yml_path=$(yml_get_path)
	if [ ! -f "${yml_path}/docker-compose.yml" ]; then
		echo "."
		return
	fi
	# get relative project root path from docker-compose.yml config
	local project_root_relative=$(grep "&project_root" ${yml_path}/docker-compose.yml | sed 's/.*"\(.*\):.*$/\1/')
	local project_root_absolute=$( cd "${yml_path}/${project_root_relative}" ; pwd )
	echo "$project_root_absolute"
}

# Return current path relative to project root with trailing slash
get_current_relative_path ()
{
	# Check that we're inside project folder
	local proj_root=$(yml_get_path)
	local cwd=$(pwd)
	# if cwd substract proj_root is still cwd then it means we're out of proj_root (unsubstractable)
	# ex: cwd=/a/b/c/d, proj_root=/a/b/c, pathdiff==d
	# ex: cwd=/a/b, proj_root=/a/b/c, pathdiff==/a/b
	local pathdiff=${cwd#$proj_root/}
	echo $pathdiff
}

# check that command is run inside project folder
get_drush_path ()
{
	local pathdiff=$(get_current_relative_path)
	if [[ "$(pwd)" == "$pathdiff" ]]; then
		echo-red "dsh: This command must be run inside Drupal's document root"
		return 1
	fi
	return 0
}

# Removes invisible residue from the string that remains leftover sometimes
# @param $1 string to cleanup
# @return clean string
clean_string ()
{
	cleaned=$(echo "$1" | sed -e 's/[^a-zA-Z0-9_-]$//')
	echo ${cleaned}
}

# get mysql connection string
get_mysql_connect ()
{
	# get connection string and cleanup residue that is leftover
	echo $(clean_string "$(_run drush sql-connect)")
}

#----------------------- Basics check functions -----------------------------

is_linux ()
{
	res=$(uname | grep 'Linux')
	if [[ ! "$res" == '' ]]; then
		return 0;
	else
		return 1;
	fi
}

is_windows ()
{
	res=$(uname | grep 'MINGW32_NT')
	if [[ "$res" != '' ]]; then
		echo-red "dsh: Running from Git Bash is not supported. Please get Babun http://babun.github.io"
		exit
	fi

	res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != '' ]]; then
		return 0;
	else
		return 1;
	fi
}

# cheсks wether we are in boot2docker console
is_boot2docker ()
{
	local res=$(uname -a|grep 'boot2docker')
	if [[ ! "$res" == '' ]]; then
		return 0;
	else
		return 1;
	fi
}

is_mac ()
{
	res=$(uname | grep 'Darwin')
	if [[ ! "$res" == '' ]]; then
		return 0;
	else
		return 1;
	fi
}

# checks if binary exists and callable in PATH
binary_found ()
{
	if [[ "$1" == "" ]]; then
		return 1;
	fi

	local bpath=$(which $1)

	if [[ "$bpath" != "" ]] && [ -f $(which $1) ]; then
		return 0
	else
		echo-red "dsh: \"$1\" executable not found."
		return 1
	fi
}

# check that vagrant binary exists
is_vagrant ()
{
	if is_linux ; then return 1; fi
	if is_boot2docker ; then return 1; fi
	binary_found 'vagrant';
	return $?
}

# check that docker-compose binary exists
is_docker_compose ()
{
	binary_found 'docker-compose';
	return $?
}

# check that docker binary exists
is_docker ()
{
	binary_found 'docker';
	return $?
}

is_docker_running ()
{
	binary_found 'nc'
	if is_linux; then
		# on linux check that pid file exists and process with that pid exists
		local pid='/var/run/docker.pid'
		if [ ! -f $pid ]; then return 1; fi
		local status=$(ps ax | grep $(cat "/var/run/docker.pid" 2>&1 1>/dev/null) 2>&1 1>/dev/null | grep -v "grep");
		return $?
	else
		# on mac and win extract host and port from $DOCKER_HOST
		local host=$(echo $DOCKER_HOST | sed -e 's/tcp:\/\/\([a-z0-9\.]*\):[0-9]*/\1/')
		local port=$(echo $DOCKER_HOST | sed -e 's/tcp:\/\/[a-z0-9\.]*:\([0-9]*\)/\1/')
		# then use netcat to check that port
		nc -z -w5 $host $port 2>/dev/null 1>/dev/null
		return $?
	fi
}

check_docker_running ()
{
	if ! is_docker_running; then
		echo-red "dsh: Docker is not running";
		exit 1
	fi
}

is_vagrantfile_absent ()
{
	vagrant_path=$(upfind "Vagrantfile")
	if [[ "$vagrant_path" == "" ]] ; then
		echo-red "dsh: [error] Vagrantfile not found in your directory tree"
		return 0
	fi

	return 1
}

# Checks if yml or vagrantfile (win, mac) is absent
is_yml_absent ()
{
	yml_path=$(yml_get_path)
	if [[ "$yml_path" == "" ]] ; then
		echo-red "dsh: docker-compose.yml not found in your directory tree"
		return 0
	fi

	if is_linux ; then
		return 1; # linux does not need vagrant
	fi

	vagrant_path=$(upfind "Vagrantfile")
	if [[ "$vagrant_path" == "" ]] ; then
		echo-red "dsh: Vagrantfile not found in your directory tree"
		return 0
	fi

	#if we got here files are present
	return 1
}

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
_confirm ()
{
	# Skip checks if not a tty
	if ! is_tty ; then return 0; fi
	
	while true; do
		read -p "$1 [y/n]: " answer
		case $answer in
			[Yy]|[Yy][Ee][Ss] )
				break
				;;
			[Nn]|[Nn][Oo] )
				exit 1
				;;
			* )
				echo 'Please answer yes or no.'
		esac
	done
}

# Display desktop notification (Mac only)
# @param $1 title
# @param $2 message
_notify ()
{
	if is_mac && [[ "$1" != "" ]]; then
		osascript -e 'display notification "'"$2"'" with title "'"$1"'"'
	fi
}

check_docker_host ()
{
	if is_linux ; then return 0; fi
	# don't change DOCKER_HOST if it's nonempty
	if [[ "$DOCKER_HOST" != "" ]]; then
		return 0;
	else
		# set Drude's default DOCKER_HOST var
		DOCKER_HOST=$DEFAULT_DOCKER_HOST
		export DOCKER_HOST=$DEFAULT_DOCKER_HOST
	fi
}
check_docker_host #perform this check in any case

#-- Containers management --

_start_containers ()
{
	echo-green "Starting containers..."
	cd $(yml_get_path)
	docker_compose up -d
	_set_cli_uid
}

# @param $1 container_name
_restart_containers ()
{
	echo-green "Restarting containers..."
	cd $(yml_get_path)
	docker_compose restart $*
	_set_cli_uid
}

# @param $1 "-a" || "--all"
_stop_containers ()
{
	echo-yellow "Stopping containers..."
	if [[ $1 == '-a' ]] || [[ $1 == '--all' ]]; then
		#                        get containers | remove trailing | select last line part only | remove 1 line | convert into line
		local all_running_containers=$(docker ps | sed 's/[ ]*$//' | sed 's/^.* \([^ ]*\)$/\1/' | sed '1d' | xargs)
		docker stop $all_running_containers
	fi
	cd $(yml_get_path)
	docker_compose stop
}

# @param $1 container_name
_remove_containers ()
{
	if [[ $1 == "" ]]; then
		echo-yellow "Removing containers..."
	fi
	cd $(yml_get_path)
	docker_compose kill $* && docker_compose rm -v --force $*
}

#------------------------------- Commands -----------------------------------
# bring box up
up ()
{
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		if ! is_docker_running; then
			echo-green "dsh: Starting vagrant vm..."
			vagrant up
			started=$?
		else
			started=0
		fi
		if [ $started -eq 0 ] && is_docker_compose ; then
			_start_containers
		fi
	elif ( is_boot2docker || is_linux ) && is_docker_compose ; then
		_start_containers
	fi
}

# Stop containers
down ()
{
	check_docker_running
	if is_yml_absent ; then return 2; fi
	if is_docker_compose ; then
		_stop_containers $@
	fi
}

# Stop Vagrant box
halt ()
{
	check_docker_running
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		vagrant halt
	elif ( is_boot2docker || is_linux ) ; then
		_stop_containers
	fi
}

# Restart container(s)
# @param $1 container_name
restart ()
{
	if is_yml_absent ; then return 2; fi
	_restart_containers $*
}

# Restart Vagrant and start containers again
reload ()
{
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		echo-green "dsh: Restarting vagrant vm..."
		vagrant reload
		started=$?
		if [ $started -eq 0 ] && is_docker_compose ; then
			_start_containers
		fi
	elif ( is_boot2docker || is_linux ) && is_docker_compose ; then
		_start_containers
	fi
}

# output status of Drude if stopped or containers if started
# @param $1 Show containers from all projects (-a)
status ()
{
	check_docker_running

	if [[ "$1" == "-a" ]] || [[ "$1" == "--all" ]]; then
		docker ps
	else
		if is_yml_absent ; then return 2; fi
		cd $(yml_get_path)
		docker_compose ps
	fi
}

vmstat ()
{
	local vagrant_path=$(upfind Vagrantfile)
	if [[ $vagrant_path == "" ]]; then
		echo-red "Vagrantfile not found"
		exit 1
	fi
	binary_found vboxmanage
	local machine_id="${vagrant_path}/.vagrant/machines/boot2docker/virtualbox/id"
	if [ ! -f $machine_id ]; then
		echo-red "Could not find id file $machine_id"
		exit 1
	fi
	local id=$(cat $machine_id)
	metrics="CPU/Load/User,CPU/Load/Kernel,Disk/Usage/Used,RAM/Usage/Used,Net/Rate/Rx,Net/Rate/Tx"
	vboxmanage metrics setup --period 1 --samples 1 "$id"
	sleep 1
	vboxmanage metrics query "$id" $metrics
}

### Installation and updates

# Install required software on Mac or Win. Check installed software on Linux
install_prerequisites ()
{
	testing_warn
	if is_docker_running; then
		if is_linux; then
			stopcmd="'dsh stop"
		else
			stopcmd="'dsh halt'"
		fi
		echo-yellow "WARNING: Docker is running. It's recommended to stop Docker first with ${stopcmd} "
		_confirm "Continue without stopping Docker?"
	fi

	if ! is_linux; then
		echo-green "Installing prerequisites..."
	fi

	if is_windows ; then
		# installing prerequisites
		local presetup_script=$(curl -fsS https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/$B2D_BRANCH/scripts/presetup-win.sh)
		if_failed "Could not get 'presetup-win.sh'. Please check your internet connection"
		bash <(echo "$presetup_script")
		read -p "Press any key when the installation in another console window is done..."
	elif is_linux ; then
		install_ubuntu
	else # mac
		local presetup_script=$(curl -fsS https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/$B2D_BRANCH/scripts/presetup-mac.sh)
		if_failed "Could not get 'presetup-mac.sh'. Please check your internet connection"
		bash <(echo "$presetup_script")
	fi
}

# Install Docker and setup Drude on Ubuntu 14.04+
install_ubuntu ()
{
	if [ -r /etc/lsb-release ]; then
		lsb_dist="$(. /etc/lsb-release && echo "$DISTRIB_ID")"
		lsb_release="$(. /etc/lsb-release && echo "$DISTRIB_RELEASE")"
	fi

	if [[ $lsb_dist != 'Ubuntu' || $lsb_release < '14.04' ]]; then
		echo-red "Sorry, this script only supports Ubuntu 14.04+"
		exit 1
	fi

	echo-green "Installing Docker..."
	curl -sSL https://get.docker.com/ | sh && \
	sudo usermod -aG docker $(whoami) && \
	sudo docker version
	if_failed "Docker installation/upgrade failed."

	echo-green "Adding a subnet for Drude..."
	ip_mask="192.168.10.1/24"
	# Make sure we don't do this twice
	if ! grep -q $ip_mask /etc/network/interfaces; then
		cat > /tmp/drude.ip.addr <<EOF
	up   ip addr add 192.168.10.1/24 dev lo label lo:drude
	down ip addr del 192.168.10.1/24 dev lo label lo:drude
EOF
		sudo sed -i '/iface lo inet loopback/r /tmp/drude.ip.addr' /etc/network/interfaces
		rm -f /tmp/drude.ip.addr
		sudo ifdown lo && sudo ifup lo
		if_failed "Docker subnet configuration failed failed."
	fi

	echo-green "Creating Drude HTTP/HTTPS reverse proxy..."
	sudo docker rm -f vhost-proxy || true
	sudo docker run -d --name vhost-proxy -p 192.168.10.10:80:80 -p 192.168.10.10:443:443 --restart=always -v /var/run/docker.sock:/tmp/docker.sock blinkreaction/nginx-proxy:stable
	if_failed "Drude HTTP/HTTPS reverse proxy setup failed."
	
	echo-green "Creating Drude DNS service..."
	sudo docker rm -f dns || true
	sudo docker run -d --name dns -p 192.168.10.10:53:53/udp --cap-add=NET_ADMIN --restart=always -v /var/run/docker.sock:/var/run/docker.sock blinkreaction/dns-discovery:stable
	if [[ $? == 0 ]]; then
		echo-green "Configuring host DNS resolver for .drude domain..."
		echo -e "\n# .drude domain resolution\nnameserver 192.168.10.10" | sudo tee -a  /etc/resolvconf/resolv.conf.d/head 
		sudo resolvconf -u
	else
		echo-red "Drude DNS service setup failed."
	fi

	echo-green "To run docker without sudo log out and back in or run 'newgrp docker' now."
}

# Install Vagrantfile and vagrant.yml required by boot2docker
# TODO: refactor to not rely on setup.sh as dsh only needs those 2 files
install_boot2docker ()
{
	testing_warn
	if is_linux ; then
		return 0; # not needed on Linux
	fi
	echo-green "Downloading boot2docker install script..."

	if is_windows ; then
		curl -fsS https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/$B2D_BRANCH/scripts/setup.sh -o ~/setup.sh
	else
		local b2d_setup_script=$(curl -fsS https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/$B2D_BRANCH/scripts/setup.sh)
	fi
	if_failed "Could not get 'setup.sh'. Please check your internet connection"

	echo "done"
	echo-yellow "Running boot2docker install script..."
	if is_windows ; then
		chmod +x ~/setup.sh
		B2D_NO_AUTOSTART=1 ~/setup.sh
	else
		# calling bash interactively. B2D_NO_AUTOSTART prevents vagrant up after download
		B2D_NO_AUTOSTART=1 bash <(echo "$b2d_setup_script")

		# Configuring resolver
		echo-yellow "Configuring *.drude wildcard DNS resolution..."
		sudo mkdir -p /etc/resolver
		echo -e "\n# .drude domain resolution\nnameserver 192.168.10.10" | sudo tee 1>/dev/null /etc/resolver/drude
	fi
}

# Download latest Drude config file
install_drude ()
{
	testing_warn
	docker_compose=$(curl -kfsS "https://raw.githubusercontent.com/blinkreaction/drude/$DRUDE_BRANCH/docker-compose.yml")
	if_failed  "Could not get latest docker-compose.yml version."

	echo "$docker_compose" | tee "docker-compose.yml" >/dev/null
	if_failed  "Could not write to docker-compose.yml"
	echo-green "Latest version of docker-compose.yml was downloaded."
}

install_autocomplete ()
{
	autocomplete_script=$(curl -kfsS "https://raw.githubusercontent.com/blinkreaction/drude/$DRUDE_BRANCH/bin/dsh-bash-complete")
	if_failed "Autocomplete script download has failed"

	destination="/usr/local/bin/dsh-bash-autocomplete"
	echo "$autocomplete_script" | tee "$destination" >/dev/null
	if_failed "Failed to write file to $destination"
	echo-green "Script saved to $destination"
	chmod +x $destination

	SOURCE_FILE=".bash_profile"
	grep -q "$destination" $HOME/$SOURCE_FILE
	if [[ $? -ne 0 ]]; then
		echo -e ". $destination" >> $HOME/$SOURCE_FILE
		if_failed "Failed to write file to $HOME/$SOURCE_FILE"
		echo-green "Autocomplete appended to $HOME/$SOURCE_FILE"
		echo-yellow "dsh: Please restart you bash session to apply"
	fi
}

# Install prerequisites, boot2docker, Drude
install ()
{
	if [[ "$1" == "prerequisites" ]]; then
		install_prerequisites
	elif [[ "$1" == "boot2docker" ]]; then
		echo -e "${green}ATTENTION:${NC} Vagrantfile and vagrant.yml will be downloaded to ${green}$(pwd)${NC}"
		echo -e "           If that is not correct please cancel, cd to proper dir and re-run command."
		_confirm "Continue with download to $(pwd)?"
		install_boot2docker
	elif [[ "$1" == "drude" ]]; then
		install_drude
	elif [[ "$1" == "autocomplete" ]]; then
		install_autocomplete
	else # Full setup
		local cwd=$(pwd)
		install_prerequisites
		if ! is_linux ; then
			cd ..
			_confirm "Install Vagrantfile to $(pwd) (This should be your <Projects> folder)?"
			install_boot2docker
			cd $cwd
		fi
		_confirm "Install default docker-compose.yml to $(pwd) (This should be your <drupal_site> folder)?"
		install_drude
		echo-green "Please restart you terminal shell to pick up DOCKER_HOST environment variable and then use 'dsh up' to start Drude"
	fi
}

# Update Drude
update ()
{
	testing_warn
	if ! is_tty ; then
		echo "'update' is not allowed in a non-interactive environment."
		return 1
	fi

	if is_boot2docker ; then
		echo-yellow "dsh: Updating from inside boot2docker will not update you VM box"
	fi

	local cwd=$(pwd)
	# run boot2docker update only on Mac and Win
	if ! is_linux ; then
		echo-green "Installing boot2docker update..."
		# Make sure ~/.drude folder exists
		mkdir -p $HOME/.drude
		
		# get current version
		local b2d_version_path=$HOME/.drude/b2d_version
		local b2d_version=$(cat $b2d_version_path 2>/dev/null)
		if [[ "$b2d_version" = "" ]]; then b2d_version="undetected version"; fi

		# get new version
		local b2d_new_version=$(curl -kfsS https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/$B2D_BRANCH/VERSION)
		if_failed "Could not get latest boot2docker version. Please check your internet connection"

		# update boot2docker

		local forced_update='';
		local destroy_box=1;
		if [[ "$1" == "-f" ]] || [[ "$2" == "-f" ]]; then forced_update="(forced update)"; fi
		if [[ "$1" == "-n" ]] || [[ "$2" == "-n" ]]; then destroy_box=0; fi

		if [[ ! "$b2d_new_version" == "$b2d_version" ]] || [ -n "$forced_update" ]; then
			echo -e "boot2docker update available: ${green}$b2d_new_version $forced_update${NC} (you have $b2d_version)."
			if [ $destroy_box -eq 1 ]; then
				echo -e "${red}Update will destroy and re-create your Vagrant box${NC} (run with -n if you know re-creation can be skipped this time)"
				_confirm "Please confirm."
			else
				echo-green "Vagrant box will not be re-created"
			fi

			# don't download update if we can't locate Vagrantfile
			if is_vagrantfile_absent ; then return 1; fi
			cd $vagrant_path
			echo "Vagrantfile is found in "$(pwd)

			echo-green "dsh: Downloading boot2docker install script..."
			local b2d_setup_script=$(curl -kfsS https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/$B2D_BRANCH/scripts/setup.sh)
			if_failed  "Could not get latest boot2docker version. Please check your internet connection"

			echo "dsh: Creating backups..."
			local timestamp=$(date +%s)
			cp -v Vagrantfile $HOME/.drude/Vagrantfile.$timestamp && \
			cp -v vagrant.yml $HOME/.drude/vagrant.yml.$timestamp
			if_failed "Unable to perform configuration backups. Aborting..."

			if [ $destroy_box -eq 1 ]; then
				echo-yellow "dsh: Destroying vagrant box..."
				vagrant destroy -f
			fi

			echo-green "dsh: Running boot2docker install script..."
			# calling bash interactively
			bash <(echo "$b2d_setup_script")

			if_failed "boot2docker install script error"

			# update recorded boot2docker version
			echo $b2d_new_version > $b2d_version_path
			echo -e "boot2docker ${green}$b2d_new_version${NC} was installed"
		else
			echo "boot2docker $b2d_version you have is the latest version (-f to force update)"
		fi
	fi

	# Update drude
	cd $cwd # we need to bo back if we were installing boot2docker
	# if install_drude ; then
	# 	if [[ ! "$b2d_new_version" == "$b2d_version" ]] && [ $destroy_box -eq 1 ] && ! is_linux; then
	# 		# if vagrant box was updated containers will be downloaded again
	# 		_confirm "Starting Vagrant box. Downloading and starting containers."
	# 	else
	# 		_confirm "Starting containers. If there's an update to container images it will be downloaded."
	# 	fi
	# 	up
	# else
	# 	echo -e "${red}Update interrupted. Could not get latest Drude version. Please check your internet connection${NC}"
	# 	return 1
	# fi
}

# Update dsh itself
update_self ()
{
	testing_warn
    sudo curl -L https://raw.githubusercontent.com/blinkreaction/drude/$DRUDE_BRANCH/bin/dsh -o /usr/local/bin/dsh && \
    if_failed "New version download has failed."
    sudo chmod +x /usr/local/bin/dsh
	echo-green "dsh successfully updated to version: "
	echo "dsh version --short" | bash
}

# Start interactive bash in container
# @param $1 container name (defaults to cli)
_bash ()
{
	if is_yml_absent ; then return 2; fi
	cd $(yml_get_path)

	# workaround through vagrant until docker solves the issue with cygwin
	if is_windows; then
		check_docker_running
		cwd=$(cygpath $(cygpath -aw .));
		local container_name
		if [[ "$1" == "" ]]; then
			container_name='localdevdrupal'
		else
			container_name="$1"
		fi
		local container_id
		container_id='$(docker-compose ps -q '$container_name')';
		command="cd $cwd && docker exec -it $container_id bash -i";
		vagrant ssh -c "$command"
		return
	fi

	if ! is_tty ; then
		echo "Interactive bash console in a non-interactive enveronment!? Nope, won't happen."
		return 1
	fi

	if is_docker && is_docker_compose ; then
		check_docker_running
		local container_name
		if [[ "$1" == "" ]]; then
			container_name='localdevdrupal'
		else
			container_name="$1"
		fi
		local container_id
		container_id=$(clean_string $(docker_compose ps -q $container_name))
		docker exec -it $container_id bash -i
	fi
}

# Run a command in container in project root
# param $* command with it's params to run
run ()
{
	if is_docker && is_docker_compose ; then
		check_docker_running
		cd $(yml_get_path)
		container_id=$(clean_string $(docker_compose ps -q cli))

		if is_tty ; then
			# need to use $* here to finally resolve slash-escaped string if any. 
			# passing $@ will not work properly if $@ contains slash espaped string from _drush command
			docker exec -it $container_id bash -ic "$*"
		else
			docker exec $container_id bash -c "$*"
		fi
	fi
}

# Run a command in container changing dir to the same folder
# param $* command with it's params to run
_run ()
{
	local COLS=$(tput cols) #get client window width
	if is_yml_absent ; then return 2; fi
	if is_docker && is_docker_compose ; then
		local path=$(get_current_relative_path)
		local cd=''
		if [[ "$path" != "$(pwd)" ]] && [[ "$path" != "" ]] ; then
			# if we're not outside project folder
			cd="cd $path &&"
		fi
		if [[ "$path" == "" ]] ; then
			# if we're on project folder level (outside docroot)
			cd="cd docroot &&"
		fi
		run "$cd export COLUMNS=$COLS && $@"
	fi
}

# start interactive mysql shell
mysql ()
{
	if is_yml_absent ; then return 2; fi
	if ! get_drush_path; then return; fi
	_run $(get_mysql_connect)" -A" # -A option to speed up mysql load
}

# Truncate db and import from sql dump
# @param $1 filename of backup file. Should be inside project root
mysql_import ()
{
	if is_yml_absent ; then return 2; fi
	if ! get_drush_path; then return; fi

	local confirm=1
	if [[ "$1" == "-y" ]] || [[ "$2" == "-y" ]]; then
		confirm=0
		if [[ "$1" == "-y" ]]; then
			shift #remove this param if -y was first
		fi
	fi

	project_root=$(yml_get_path)
	local filename=$(basename $1)
	local filepath=$(get_abs_path $1)
	#substract project root path from filepath
	local pathdiff=${filepath#$project_root}

	if [[ $pathdiff == $filepath ]] ; then
		# substraction did not succeed because file is outside project root
		echo "\"$filename\" should be inside your project root folder"
		return
	fi

	if [ $confirm -eq 1 ]; then
		_confirm "[!] This will drop the existing database. Continue?"
	fi

	check_docker_running

	_drush sql-drop -y
	local sql_connect
	sql_connect=$(get_mysql_connect)
	echo "Importing $filename into the database..."

	# Use pv for interactive shells only.
	if is_tty ; then
		# Check if we have a gzipped dump and treat it differently.
		if [[ $filename == *.gz ]]; then
			file_size=$(gzip -l $1 | sed -n 2p | awk '{print $2}')
			run "zcat ./$pathdiff/$filename | pv --size $file_size | "$sql_connect
		else
			run "pv ./$pathdiff/$filename | "$sql_connect
		fi
	else
		# Check if we have a gzipped dump and treat it differently.
		if [[ $filename == *.gz ]]; then
			run "zcat ./$pathdiff/$filename | "$sql_connect
		else
			run "cat ./$pathdiff/$filename | "$sql_connect
		fi
	fi

	# Check if import succeded or not and print results.
	if [ $? -eq 0 ]; then
		echo-green "dsh: mysql-import finished";
		_notify "Dsh" "Mysql import finished"
	else
		echo-red "dsh: mysql-import failed";
		_notify "Dsh" "Mysql import failed!"
	fi
}

# Shortcut to run drush cc ... on site
# @param $1 type of cache to clean (all, css-js, ...)
clear_cache ()
{
	if is_yml_absent ; then return 2; fi
	#if ! get_drush_path; then return; fi
	local type='all'
	if [[ ! "$1" == "" ]]; then
		type=$1
	fi

	if [[ "$(get_current_relative_path)" == "" ]] && [ -d docroot ]; then # we're on top level, let's cd to docroot for drush to work
		cd docroot
	fi
	_run 'drush cc '$type
}

# Shorthand for executing drush commands
# @param $* arguments and params passed to Drush
_drush ()
{
	if is_yml_absent ; then return 2; fi
	#if ! get_drush_path; then return; fi

	cwd=$(pwd)
	if [[ "$(get_current_relative_path)" == "" ]] && [ -d docroot ]; then # we're on top level, let's cd to docroot for drush to work
		cd docroot
	fi
	_run "drush $@"
	cd $cwd
}

# Run Behat tests (also install dependencies through Composer)
# @param $* arguments and params passed to Behat
behat ()
{
	if is_yml_absent ; then return 2; fi
	local params=''
	local path='tests/behat'
	for i in "$@"; do
		case $i in
			--path=*)
				path="${i#*=}"
				;;
			*)
				params=$params$i" "
				;;
		esac;
	done

	local project_root_path=$(yml_get_path)
	local behat_yml_path="${project_root_path}/${path}/behat.yml"
	if [[ ! -f "${behat_yml_path}" ]]; then
		echo-red "Could not find ${behat_yml_path}"
		exit 1
	fi
	run "cd $path && composer install --prefer-source --no-interaction"
	run "cd $path && bin/behat -p docker "$params
}

# Execute project init scripts (if it exists)
# Looks for script at .drude/scripts/drude-init.sh
# @param $@ params to pass to init script
init ()
{
	export PROJECT_ROOT=$(yml_get_path)
	local init_script="$PROJECT_ROOT/.drude/scripts/drude-init.sh"
	if [[ -f $init_script ]]; then
		exec $init_script $@
	else
		echo "Project init script is missing: $init_script"
		exit 1
	fi
}

# Download script by URL and execute it
# @param $1 url of init script.
exec_url ()
{
	if [[ "$1" != "" ]]; then
		local script=$(curl -fsS $1)
		if_failed "Failed downloading script $1"
		bash <(echo "$script")
	else
		echo-red "URL is required"
	fi
}

# Remove container(s)
# @param $1 $2... container names
remove ()
{
	_confirm "[!] This will delete all project containers including the DB one. Your database is stored in a local folder and is safe.";

	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		if ! is_docker_running; then
			echo-green "dsh: Starting vagrant vm..."
			vagrant up
			started=$?
		else
			started=0
		fi

		if [ $started -eq 0 ] && is_docker_compose ; then
			_remove_containers $*
		fi
	elif ( is_boot2docker || is_linux ) && is_docker_compose ; then
		_remove_containers $*
	fi
}

# Reset container(s) (stop, remove, up)
# @param $1 $2... containers names
reset ()
{
	remove $*
	_start_containers
}

# Show logs
# @param $* container(s) name
logs ()
{
	cd $(yml_get_path)
	docker_compose logs $*
}

# Set uid of the primary "docker" user in the cli container
# Useful to match the host uid with the uid in the cli container and avoid file permission issues this way.
_set_cli_uid ()
{
	if [[ $DRUDE_SET_UID == "" ]] ; then
		DRUDE_SET_UID=$(id -u)
	fi
	# Let uid to be set with the DRUDE_SET_UID env variable
	if [[ $DRUDE_SET_UID != 0 ]] ; then
		local host_uid=$DRUDE_SET_UID
		local container_uid=$(docker exec $(docker-compose ps -q cli) id -u)

		if [[ $container_uid != $host_uid ]]; then
			echo-green "Changing user uid in cli from $container_uid to $host_uid..."
			docker exec -it -u root $(docker-compose ps -q cli) usermod -u $host_uid docker
			echo-green "Reseting permissions on /var/www..."
			docker exec -it -u root $(docker-compose ps -q cli) chown -R docker:users /var/www
			echo-green "Restarting php daemon..."
			docker exec -it -u root $(docker-compose ps -q cli) supervisorctl restart php5-fpm
		else
			echo-green "Container and host uids already match ($container_uid)."
		fi
	else
		echo-yellow "Can not match uid in cli with host's uid (uid=0). Using default (uid=1000)."
	fi
}

# Command bindings
argv="$@"
case $1 in
	up)
		up
		;;
	start)
		up
		;;
	stop)
		shift
		down $*
		;;
	down)
		shift
		down $*
		;;
	halt)
		halt
		;;
	restart)
		shift
		restart $*
		;;
	reload)
		reload
		;;
	status)
		shift
		status $*
		;;
	st)
		shift
		status $*
		;;
	ps)
		shift
		status $*
		;;
	vmstat)
		vmstat
		;;
	install)
		shift
		install $*
		;;
	update)
		shift
		update $*
		;;
	self-update)
		update_self
		;;
	bash)
		shift
		_bash $*
		;;
	exec)
		shift
		_run $*
		;;
	run)
		shift
		_run $*
		;;
	mysql)
		mysql
		;;
	sqlc)
		mysql
		;;
	mysql-import)
		mysql_import $2 $3
		;;
	sqli)
		mysql_import $2 $3
		;;
	cc)
		clear_cache $2
		;;
	drush)
		shift
		# slash escape space-delimited parameters for safe passing between functions
		cmd=$(printf " %q" "$@")
		_drush $cmd
		;;
	behat)
		shift
		behat "$@"
		;;
	init)
		shift
		init $@
		;;
	exec-url)
		shift
		exec_url $*
		;;
	reset)
		shift
		reset $*
		;;
	remove)
		shift
		remove $*
		;;
	version)
		version
		;;
	-v)
		version
		;;
	--version)
		version
		;;
	bash_comp_words)
		shift
		bash_comp_words $*
		;;
	logs)
		shift
		logs $@
		;;
	"")
		help
		;;
	help)
		help
		;;
	*)
		echo "Unknown command '"$*"'. See 'dsh help' for list of available commands"
		exit 1
esac
